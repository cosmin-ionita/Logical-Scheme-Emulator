<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Logical Scheme Emulator Help.

Pentru a reprezenta corect o schemă logică, utilizatorul va trebui să respecte următoarele reguli simple:
	
		1 --- Orice control se plasează pe suprafața de lucru prin drag &amp; drop. 

		2 --- Controlul de tip ”cât timp” precum și cel de tip ”dacă” necesită plasarea unui control de închidere, în momentul în care utilizatorul
		         decide faptul că structura condițională/repetitivă pe care o reprezintă trebuie să se sfârșească. Acest lucru se face prin plasarea 
		         controlului de tip ”end”.

		3 --- În momentul plasării unui control de tip ”dacă”, utilizatorul alege ramura pe care va plasa următorul control (citește, scrie, etc.)
		         prin plasarea controlului (drag &amp; drop) în zona apropiată ramurii alese (L.S.E calculează distanța minimă dintre ramura cea mai apropiată
		         și punctul de drop de pe suprafața de lucru).


		4 --- Un control de tip ”dacă” suportă plasarea unui alt control de același tip, pe o ramură a lui (ceea ce determină alungirea ramurii
		         controlului-părinte), dar nu în orice mod. Exemplu: într-un control de tip ”dacă” se plasează pe ramura cu DA un alt control de tip
		         ”dacă”. Se poate plasa un alt control de tip ”dacă” pe ramura cu DA a acestui ultim control, însă nu se poate plasa pe ramura cu NU!

		5 --- Completarea unui control de tip ”dacă” se face în modul următor: se completează ramura cu DA, urmată apoi de completarea 
		         ramurii cu NU, apoi de plasarea controlului ”end” (regulă foarte importantă). Această ordine de completare este sugerată și de 
		         săgeata roșie aflată pe ramura cu DA a fiecărui ”if”.

		6 --- Orice schemă logică se termină cu plasarea controlului ”stop”, ceea ce deblochează butonul ”interpretare” care afișază codul aferent
		         schemei reprezentate.
		
		7 --- Exista o serie de algoritmi pentru care funcționalitatea aplicației este asigurată (programul este stabil):

				--- Rezolvarea ecuației de grad I cu coeficienți reali
				--- Rezolvarea ecuației de grad II cu coeficienți reali*
				--- Maximul/Minimul unei mulțimi de numere reale stocate într-un tablou unidimensional
				--- Cel mai mare divizor comun a două numere întregi
				--- Cel mai mic multiplu comun a două numere întregi
				--- Verificarea primalității unui număr
				--- Sortarea prin interschimbare
				--- Calcularea numărului n! (n factorial)
				--- Calcularea numărului ”combinări de n luate câte k” 
				--- Verificarea calității de palindrom a unui număr
				--- Transformarea unui număr n din baza 10 într-o bază dată
				--- Căutarea binară (varianta iterativă)
				--- Afișarea transpusei unei matrice
				--- Valoarea unui polinom într-un punct x dat
				--- Calculul oricărei sume din cadrul unei matrice pătratice 
				--- Verificarea calității de pătrat perfect a unui număr
				--- Calculul numărului n la puterea k
				</value>
  </data>
</root>